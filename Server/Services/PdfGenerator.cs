using QuestPDF.Fluent;
using QuestPDF.Helpers;
using QuestPDF.Infrastructure;
using Server.Models;
namespace Server.Services;

/// <summary>
/// This class provides methods to generate various types of PDF reports.
/// It holds templates for reports such as performance, packet, and virus scan reports.
/// The methods use the QuestPDF library to create and format the PDFs.
/// </summary>
public class PdfGenerator
{
    public static byte[] GenerateFilePdf(string fileName, int malicious, int undetected)
    {
        int sum = malicious + undetected;
        var document = Document.Create(container =>
        {
            container.Page(page =>
            {
                page.Size(PageSizes.A4);
                page.Margin(1, Unit.Inch);
                page.DefaultTextStyle(x => x.FontSize(14).FontFamily("Arial"));

                // Wrap header text in a container and apply padding correctly
                page.Header()
                    .Height(50)
                    .Background(Colors.Blue.Medium)
                    .Padding(10)
                    .AlignMiddle()
                    .Text("Virus Scan Report")
                    .FontSize(22)
                    .FontColor(Colors.White)
                    .SemiBold()
                    .FontFamily("Segoe UI");



                page.Content().PaddingVertical(15).Column(column =>
                {

                    column.Spacing(15);

                    column.Item().Text(text =>
                    {
                        text.Span("File Name: ").SemiBold();
                        text.Span(fileName);
                    });

                    column.Item().Text(text =>
                    {
                        text.Span("⚠️ Bad Detections: ").SemiBold().FontColor(Colors.Red.Medium);
                        text.Span($"{malicious} / {sum}");
                    });

                    column.Item().Text(text =>
                    {
                        text.Span("✅ Undetected by Engines: ").SemiBold().FontColor(Colors.Green.Medium);
                        text.Span($"{undetected} / {sum}");
                    });

                    column.Item().PaddingTop(20).LineHorizontal(1).LineColor(Colors.Grey.Lighten2);

                    column.Item().Text("Report generated by the Recoursia virus scan system.")
                        .Italic().FontSize(10).FontColor(Colors.Grey.Darken1).AlignRight();
                });
            });
        });

        return document.GeneratePdf();
    }

    /// <summary>
    /// Generates a performance report PDF and returns it as a byte array.
    /// The PDF includes a header with the title "Performance Report", a table
    /// with the current, average, and standard deviation of CPU, RAM, and disk usage,
    /// and an optional footer with the user's name and email.
    /// The metrics are passed as an anonymous object containing the CPU, RAM, and disk usage,
    /// and the user is an optional parameter, and if provided, the footer will contain the user's name and email.
    /// </summary>
    /// <param name="metrics">An anonymous object containing the CPU, RAM, and disk usage.</param>
    /// <param name="user">Optional user object containing the name and email.</param>
    /// <param name="averageCpuUsage">The average CPU usage.</param>
    /// <param name="averageRamUsage">The average RAM usage.</param>
    /// <param name="averageDiskUsage">The average disk usage.</param>
    /// <param name="cpuSd">The standard deviation of the CPU usage.</param>
    /// <param name="ramSd">The standard deviation of the RAM usage.</param>
    /// <param name="diskSd">The standard deviation of the disk usage.</param>
    /// <returns>A byte array representing the generated PDF.</returns>
    public static byte[] GeneratePerformancePdf(
       (
           double cpuUsage, double ramUsage, double diskUsage) metrics,
       User? user = null,
       double averageCpuUsage = 0.0,
       double averageRamUsage = 0.0,
       double averageDiskUsage = 0.0,
       double cpuSd = 0.0,
       double ramSd = 0.0,
       double diskSd = 0.0
   )
    {
        var document = Document.Create(container =>
        {
            container.Page(page =>
            {
                // 1. Page setup
                page.Size(PageSizes.A4);
                page.Margin(1, Unit.Inch);

                // 2. Header
                page.Header()
                    .Height(50)
                    .Background(Colors.Blue.Medium)
                    .Padding(10)
                    .AlignMiddle()
                    .Text("Performance Report")
                    .FontSize(22)
                    .FontColor(Colors.White)
                    .SemiBold()
                    .FontFamily("Segoe UI");

                // 3. Content with four-column table
                page.Content()
                    .PaddingVertical(20)
                    .Column(col =>
                    {
                        // Metrics table with Metric, Current, Average, StdDev
                        col.Item().Table(table =>
                        {
                            table.ColumnsDefinition(c =>
                            {
                                c.RelativeColumn();  // Metric
                                c.RelativeColumn();  // Current Usage
                                c.RelativeColumn();  // Average Usage
                                c.RelativeColumn();  // Std Deviation
                            });

                            table.Header(header =>
                            {
                                header.Cell().Background(Colors.Grey.Lighten2).Padding(5)
                                      .Text("Metric").SemiBold().FontFamily("Tahoma");
                                header.Cell().Background(Colors.Grey.Lighten2).Padding(5)
                                      .Text("Current Usage").SemiBold().FontFamily("Tahoma");
                                header.Cell().Background(Colors.Grey.Lighten2).Padding(5)
                                      .Text("Average Usage").SemiBold().FontFamily("Tahoma");
                                header.Cell().Background(Colors.Grey.Lighten2).Padding(5)
                                      .Text("Std Deviation").SemiBold().FontFamily("Tahoma");
                            });

                            void AddRow(string name, string current, string average, string sd)
                            {
                                table.Cell().Padding(5)
                                     .BorderBottom(1).BorderColor(Colors.Grey.Lighten2)
                                     .Text(name);

                                table.Cell().Padding(5)
                                     .BorderBottom(1).BorderColor(Colors.Grey.Lighten2)
                                     .Text(current);

                                table.Cell().Padding(5)
                                     .BorderBottom(1).BorderColor(Colors.Grey.Lighten2)
                                     .Text(average);

                                table.Cell().Padding(5)
                                     .BorderBottom(1).BorderColor(Colors.Grey.Lighten2)
                                     .Text(sd);
                            }

                            AddRow(
                                "CPU Usage",
                                $"{metrics.cpuUsage / 100:P1}",
                                $"{averageCpuUsage / 100:P1}",
                                $"{cpuSd / 100:P1}");
                            AddRow(
                                "RAM Usage",
                                $"{metrics.ramUsage / 100:P1}",
                                $"{averageRamUsage / 100:P1}",
                                $"{ramSd / 100:P1}");
                            AddRow(
                                "Disk Usage",
                                $"{metrics.diskUsage / 100:P1}",
                                $"{averageDiskUsage / 100:P1}",
                                $"{diskSd / 100:P1}");
                        });

                        // User info (optional)
                        if (user != null)
                        {
                            col.Item()
                                .PaddingTop(15)
                                .Text($"User: {user.Name}  |  Email: {user.Email}")
                                .FontFamily("Tahoma")
                                .FontSize(12)
                                .FontColor(Colors.Grey.Darken1);
                        }
                    });

                // 4. Footer
                page.Footer()
                    .AlignCenter()
                    .Padding(5)
                    .Text($"Generated on {DateTime.Now:yyyy-MM-dd HH:mm:ss}")
                    .FontFamily("Verdana")
                    .FontSize(10)
                    .FontColor(Colors.Grey.Darken1);
            });
        });

        return document.GeneratePdf();
    }


    /// <summary>
    /// Generates a packet report PDF and returns it as a byte array.
    /// The PDF includes a header with the title "Packet Report", a table
    /// with the timestamp, source IP, source port, destination IP, destination port, and protocol
    /// of each packet, and an optional footer with the user's name and ID.
    /// The packets are passed as an enumerable of <see cref="PacketInfo"/>, and the user is an
    /// optional parameter, and if provided, the footer will contain the user's name and ID.
    /// </summary>
    /// <param name="packets">Enumerable of <see cref="PacketInfo"/> objects representing the packets.</param>
    /// <param name="user">Optional user object containing the name and ID.</param>
    /// <returns>A byte array representing the generated PDF.</returns>
    public static byte[] GeneratePacketPdf(
        IEnumerable<PacketInfo> packets,
        User? user = null)
    {
        var document = Document.Create(container =>
        {
            container.Page(page =>
            {
                // 1. Page setup
                page.Size(PageSizes.A4);
                page.Margin(1, Unit.Inch);

                // 2. Header
                page.Header()
                    .Height(50)
                    .Background(Colors.Blue.Medium)
                    .Padding(10)
                    .AlignMiddle()
                    .Text("Packet Report")
                    .FontSize(22)
                    .FontColor(Colors.White)
                    .SemiBold();

                // 3. Content: packets table
                page.Content().PaddingVertical(20).Table(table =>
                {
                    // Define five equal columns
                    table.ColumnsDefinition(columns =>
                    {
                        columns.RelativeColumn();
                        columns.RelativeColumn();
                        columns.RelativeColumn();
                        columns.RelativeColumn();
                        columns.RelativeColumn();
                    });

                    // Header row styling
                    table.Header(header =>
                    {
                        header.Cell().Background(Colors.Grey.Lighten2).Padding(5).Text("Timestamp").SemiBold();
                        header.Cell().Background(Colors.Grey.Lighten2).Padding(5).Text("Source IP").SemiBold();
                        header.Cell().Background(Colors.Grey.Lighten2).Padding(5).Text("Source Port").SemiBold();
                        header.Cell().Background(Colors.Grey.Lighten2).Padding(5).Text("Destination IP").SemiBold();
                        header.Cell().Background(Colors.Grey.Lighten2).Padding(5).Text("Destination Port").SemiBold();
                        header.Cell().Background(Colors.Grey.Lighten2).Padding(5).Text("Protocol").SemiBold();
                    });

                    // Data rows
                    foreach (var packet in packets)
                    {
                        table.Cell().Padding(5).BorderBottom(1).BorderColor(Colors.Grey.Lighten2).Text(packet.Timestamp.ToString("yyyy-MM-dd HH:mm:ss"));
                        table.Cell().Padding(5).BorderBottom(1).BorderColor(Colors.Grey.Lighten2).Text(packet.SourceIP);
                        table.Cell().Padding(5).BorderBottom(1).BorderColor(Colors.Grey.Lighten2).Text(packet.SourcePort.ToString());
                        table.Cell().Padding(5).BorderBottom(1).BorderColor(Colors.Grey.Lighten2).Text(packet.DestinationIP);
                        table.Cell().Padding(5).BorderBottom(1).BorderColor(Colors.Grey.Lighten2).Text(packet.DestinationPort.ToString());  // :contentReference[oaicite:0]{index=0}
                        table.Cell().Padding(5).BorderBottom(1).BorderColor(Colors.Grey.Lighten2).Text(packet.Protocol);                  // :contentReference[oaicite:0]{index=0}
                    }
                });

                // 4. Optional user info block
                if (user != null)
                {
                    page.Content()
                        .PaddingTop(10)
                        .ShowEntire()
                        .Text($"User: {user.Name}  |  Id: {user.Id}")
                        .FontSize(12)
                        .FontColor(Colors.Grey.Darken1);
                }

                // 5. Footer                                        
                page.Footer()
                    .AlignCenter()
                    .Padding(5)
                    .Text($"Generated on {DateTime.Now:yyyy-MM-dd HH:mm:ss}")
                    .FontSize(10)
                    .FontColor(Colors.Grey.Lighten1);
            });
        });

        return document.GeneratePdf();  // :contentReference[oaicite:0]{index=0}
    }
    /// <summary>
    /// Generates a simple PDF and returns it as a byte array.
    /// </summary>
    public static byte[] GenerateSimplePdfBytes()
    {
        // Create the document
        var document = Document.Create(container =>
        {
            container.Page(page =>
            {
                page.Size(PageSizes.A4);
                page.Margin(2, Unit.Centimetre);
                page.Content().Column(col =>
                {
                    col.Item().Text("Hello from QuestPDF! 🎉").FontSize(20);
                    col.Item().Text("This PDF was generated in-memory for emailing.");
                });
            });
        });

        // Return the PDF as a byte array
        // QuestPDF supports GeneratePdf() overload that returns byte[] directly
        var pdfBytes = document.GeneratePdf();
        return pdfBytes;  // :contentReference[oaicite:0]{index=0}
    }
    /// <summary>
    /// Generates a PDF report of flagged packets and returns it as a byte array.
    /// The PDF includes a header titled "Flagged Packets Report" and a table 
    /// summarizing the flagged packets, which are grouped by protocol, source IP, 
    /// source port, destination IP, and destination port. Each row in the table 
    /// displays the type, source IP, source port, destination IP, destination port, 
    /// and count of packets for each group. The packets are filtered to include 
    /// only those marked as suspicious or malicious.
    /// </summary>
    /// <param name="packets">Enumerable of <see cref="PacketInfo"/> objects representing the packets to be included in the report.</param>
    /// <returns>A byte array representing the generated PDF.</returns>
    public static byte[] GenerateFlaggedPacketsPdf(
    IEnumerable<PacketInfo> packets)
    {
        // 1. Filter and group
        var flaggedGroups = packets
            .Where(p => p.isSuspicious || p.isMalicious)
            .GroupBy(p => new
            {
                p.Protocol,
                p.SourceIP,
                p.SourcePort,
                p.DestinationIP,
                p.DestinationPort
            });

        // 2. Build document
        var document = Document.Create(container =>
        {
            container.Page(page =>
            {
                // Page setup
                page.Size(PageSizes.A4);
                page.Margin(1, Unit.Inch);
                page.DefaultTextStyle(x => x.FontSize(14).FontFamily("Arial"));

                // Header
                page.Header()
                    .Height(50)
                    .Background(Colors.Blue.Medium)
                    .Padding(10)
                    .AlignMiddle()
                    .Text("Flagged Packets Report")
                    .FontSize(22)
                    .FontColor(Colors.White)
                    .SemiBold();

                // Content
                page.Content()
                    .PaddingVertical(20)
                    .Column(col =>
                    {
                        // Optional: summary
                        col.Item().Text(text =>
                        {
                            var total = flaggedGroups.Sum(g => g.Count());
                            text.Span("Total flagged packets: ").SemiBold();
                            text.Span(total.ToString());
                        });

                        col.Item().PaddingTop(10).LineHorizontal(1).LineColor(Colors.Grey.Lighten2);

                        // Table
                        col.Item().Table(table =>
                        {
                            // Define six columns: Type, Src IP, Src Port, Dest IP, Dest Port, Count
                            table.ColumnsDefinition(c =>
                            {
                                c.RelativeColumn(2); // Type description
                                c.RelativeColumn();  // Source IP
                                c.RelativeColumn();  // Source Port
                                c.RelativeColumn();  // Destination IP
                                c.RelativeColumn();  // Destination Port
                                c.RelativeColumn();  // Count
                            });

                            // Header row
                            table.Header(header =>
                            {
                                header.Cell().Background(Colors.Grey.Lighten2).Padding(5)
                                    .Text("Type").SemiBold();
                                header.Cell().Background(Colors.Grey.Lighten2).Padding(5)
                                    .Text("Src IP").SemiBold();
                                header.Cell().Background(Colors.Grey.Lighten2).Padding(5)
                                    .Text("Src Port").SemiBold();
                                header.Cell().Background(Colors.Grey.Lighten2).Padding(5)
                                    .Text("Dest IP").SemiBold();
                                header.Cell().Background(Colors.Grey.Lighten2).Padding(5)
                                    .Text("Dest Port").SemiBold();
                                header.Cell().Background(Colors.Grey.Lighten2).Padding(5)
                                    .Text("Count").SemiBold();
                            });

                            // Data rows
                            foreach (var group in flaggedGroups)
                            {
                                var key = group.Key;
                                var protocol = key.Protocol ?? "Unknown";
                                var description = PacketInfo.Descriptions.TryGetValue(protocol, out var desc)
                                    ? desc
                                    : protocol;

                                table.Cell().Padding(5)
                                    .BorderBottom(1).BorderColor(Colors.Grey.Lighten2)
                                    .Text(protocol);

                                table.Cell().Padding(5)
                                    .BorderBottom(1).BorderColor(Colors.Grey.Lighten2)
                                    .Text(key.SourceIP);

                                table.Cell().Padding(5)
                                    .BorderBottom(1).BorderColor(Colors.Grey.Lighten2)
                                    .Text(key.SourcePort?.ToString() ?? "-");

                                table.Cell().Padding(5)
                                    .BorderBottom(1).BorderColor(Colors.Grey.Lighten2)
                                    .Text(key.DestinationIP);

                                table.Cell().Padding(5)
                                    .BorderBottom(1).BorderColor(Colors.Grey.Lighten2)
                                    .Text(key.DestinationPort?.ToString() ?? "-");

                                table.Cell().Padding(5)
                                    .BorderBottom(1).BorderColor(Colors.Grey.Lighten2)
                                    .Text(group.Count().ToString());
                            }
                        });

                    });

                // Footer
                page.Footer()
                    .AlignCenter()
                    .Padding(5)
                    .Text($"Generated on {DateTime.Now:yyyy-MM-dd HH:mm:ss}")
                    .FontSize(10)
                    .FontColor(Colors.Grey.Lighten1);
            });
        });

        return document.GeneratePdf();
    }

}
